class App < Sinatra::Base

  # user list
  get '/user/list' do
    @users = User.all
    haml :'user/list'
  end

  # add a user
  get '/user/add' do
    haml :'user/add'
  end

  post '/user/add' do
    nice_params = escape_html_for_set(params)
    user = User.create({name: nice_params['name'], first_name: nice_params['first_name'], email: nice_params['email'], image: nice_params['image']})
    flash[:notice] = 'User created successfully'
    redirect "/user/profile/#{user.id}"
  end

  # refresh handicap
  get '/user/profile/:id/refresh' do
    @this_user = User.find(params[:id])
    @this_user.update_handicap
    flash[:notice] = 'Handicap refreshed'
    haml :'/user/profile'
  end

  # profile page
  get '/user/profile/:id' do
    @this_user = User.find(params[:id])
    @page = (params[:p] || 1).to_i
    @rounds = @this_user.rounds.order(played_date: :desc).limit(20).offset((@page - 1) * 20)
    haml :'user/profile'
  end

  # self sign-up
  post '/signup' do
    # generate a token and email it
    token = SecureRandom.urlsafe_base64
    address = params['email']
    $redis.set(token,address, {ex: 3600})
    # check if the user exists
    if User.find_by(email: address).nil?
      my_subject = 'IWTA Handicap Signup'
      my_body = "<p>Thanks for signing up. To continue, please click the link:-</p><p><a href='http://iwta.marsupialmusic.net/signup/token/#{token}'>Continue to sign up</a></p>"
    else
      my_subject = 'Password reset'
      my_body = "<p>You forgot your password? Click the link to reset:-</p><p><a href='http://iwta.marsupialmusic.net/password-reset/#{token}'>Password reset</a></p><p>If not, feel free to ignore this email."
    end
    my_body << '<p>--</p><p>Generated by IWTA Handicapping System. If you did not initiate this email, please delete and/or contact sja@marsupialmusic.net</p>'
    message = Mail.new do
      from            ENV['MAIL_FROM']
      to              address
      subject         my_subject
      content_type    'text/html; charset=UTF-8'
      body            my_body
      delivery_method Mail::Postmark, api_token: ENV['POSTMARK_API_TOKEN']
    end
    message.deliver
    flash[:notice] = 'Please check your email for next steps'
    redirect '/'
  end

  # link handling for self sign-up
  get '/signup/token/:token' do
    @email = $redis.get(params['token'])
    if @email.nil?
      flash[:error] = 'It seems your token is invalid or has expired.'
      redirect '/login'
    else
      haml :'user/signup'
    end
  end

  # link handling for password resets
  get '/password-reset/:token' do
    @email = $redis.get(params['token'])
    if @email.nil?
      flash[:error] = 'It seems your token is invalid or has expired.'
      redirect '/login'
    else
      haml :'user/password_reset'
    end
  end

  post '/password-reset/:token' do
    @email = $redis.get(params['token'])
    if @email == params[:email] && ( @user = User.find_by(email: params[:email]) )
      flash[:notice] = 'Password reset successful'
      session['email'] = @user.email
      @user.password = params['password']
      @user.password_confirmation = params['password2']
      @user.save
      redirect '/'
    else
      flash[:error] = 'Some funny business is going on.'
      redirect '/login'
    end
  end

  # form handling for final step sign-up
  post '/signup/complete' do
    puts params.inspect
    @user = User.create(
      name:                   params['name'],
      email:                  params['email'],
      first_name:             params['first_name'],
      last_name:              params['last_name'],
      password:               params['password'],
      password_confirmation:  params['password2']
    )
    session['email'] = @user.email
    redirect '/'
  end

  get '/signup/admin' do
    authorize_admin
    haml :'user/admin'
  end

  post '/signup/admin' do
    authorize_admin
    password = SecureRandom.urlsafe_base64
    this_user = User.create(
      name:                   params['name'],
      email:                  params['email'],
      first_name:             params['first_name'],
      last_name:              params['last_name'],
      password:               password,
      password_confirmation:  password
    )
    flash[:success] = 'User created'
    redirect "/user/profile/#{this_user.id}"
  end

end
